I"J<p>In college I asked this all the time, specially when there were a small set of choices. I read the book <a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X/ref=sr_1_1?ie=UTF8&amp;qid=1490718500&amp;sr=8-1&amp;keywords=computer+systems">Computer Systems: A Programmer’s Perspective </a> and it explains with examples what compiler does when facing either a switch or if-else statement.</p>

<p>I did a test compiling <code class="highlighter-rouge">gcc</code> with <code class="highlighter-rouge">-S</code> to get the assembly code:</p>

<p>In the red corner we have a switch statement with <em>several</em> entries:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">asm_switch</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
	<span class="k">switch</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
		<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">x</span><span class="o">++</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
			<span class="n">x</span><span class="o">--</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
			<span class="n">x</span><span class="o">*=</span><span class="mi">5</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">4</span><span class="p">:</span>
			<span class="n">x</span><span class="o">+=</span><span class="mi">10</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">5</span><span class="p">:</span>
			<span class="n">x</span><span class="o">-=</span><span class="mi">10</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
		<span class="nl">default:</span>
			<span class="n">x</span><span class="o">*=</span><span class="mi">2</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And it’s assembly code:</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">asm_switch:</span>
<span class="nl">.LFB3:</span>
	<span class="nf">.cfi_startproc</span>
	<span class="nf">pushq</span>	<span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa_offset</span> <span class="mi">16</span>
	<span class="nf">.cfi_offset</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span>
	<span class="nf">movq</span>	<span class="o">%</span><span class="nb">rsp</span><span class="p">,</span> <span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa_register</span> <span class="mi">6</span>
	<span class="nf">movl</span>	<span class="o">%</span><span class="nb">edi</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">cmpl</span>	<span class="kc">$</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">ja</span>	<span class="nv">.L12</span>
	<span class="nf">movl</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">),</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">movq</span>	<span class="nv">.L14</span><span class="p">(,</span><span class="o">%</span><span class="nb">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="o">%</span><span class="nb">rax</span>
	<span class="nf">jmp</span>	<span class="o">*%</span><span class="nb">rax</span>
	<span class="nf">.section</span>	<span class="nv">.rodata</span>
	<span class="nf">.align</span> <span class="mi">8</span>
	<span class="nf">.align</span> <span class="mi">4</span>
<span class="nl">.L14:</span> <span class="c1">;Hash Table</span>
	<span class="nf">.quad</span>	<span class="nv">.L12</span>
	<span class="nf">.quad</span>	<span class="nv">.L13</span>
	<span class="nf">.quad</span>	<span class="nv">.L15</span>
	<span class="nf">.quad</span>	<span class="nv">.L16</span>
	<span class="nf">.quad</span>	<span class="nv">.L17</span>
	<span class="nf">.quad</span>	<span class="nv">.L18</span>
	<span class="nf">.text</span>
<span class="nl">.L13:</span> <span class="c1">;x+=1</span>
	<span class="nf">addl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L19</span>
<span class="nl">.L15:</span> <span class="c1">;x-=1</span>
	<span class="nf">subl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L19</span>
<span class="nl">.L16:</span> <span class="c1">;x*=5</span>
	<span class="nf">movl</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">),</span> <span class="o">%</span><span class="nb">edx</span>
	<span class="nf">movl</span>	<span class="o">%</span><span class="nb">edx</span><span class="p">,</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">sall</span>	<span class="kc">$</span><span class="mi">2</span><span class="p">,</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">addl</span>	<span class="o">%</span><span class="nb">edx</span><span class="p">,</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">movl</span>	<span class="o">%</span><span class="nb">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L19</span>
<span class="nl">.L17:</span> <span class="c1">;x-=10</span>
	<span class="nf">addl</span>	<span class="kc">$</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L19</span>
<span class="nl">.L18:</span> <span class="c1">;x+=10</span>
	<span class="nf">subl</span>	<span class="kc">$</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L19</span>
<span class="nl">.L12:</span> <span class="c1">;x*=2</span>
	<span class="nf">sall</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
<span class="nl">.L19:</span>
	<span class="nf">movl</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">),</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">popq</span>	<span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span>
	<span class="nf">ret</span>
	<span class="nf">.cfi_endproc</span>
</code></pre></div></div>

<p>As it is observed <code class="highlighter-rouge">asm_switch</code> has 6 cases. The compiler converts the switch statement in a <em>hash table</em> under the label <code class="highlighter-rouge">.L14</code>. 
As it is expected, the hash table has 6 entries, each entry correspond to each <code class="highlighter-rouge">case</code>.
The line <code class="highlighter-rouge">jmp	*%rax</code> uses the content of register <code class="highlighter-rouge">rax</code> to choose which <code class="highlighter-rouge">case</code> will be executed.</p>

<p>Now, let’s see what happens when a switch statement has <em>few</em> entries.
In the blue corner we have a switch statement with 3 cases:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">short_switch</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span><span class="p">){</span>	
	<span class="k">switch</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
		<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">x</span><span class="o">++</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
			<span class="n">x</span><span class="o">--</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="nl">default:</span>
			<span class="n">x</span><span class="o">*=</span><span class="mi">2</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>and it’s assembly code:</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">short_switch:</span>
<span class="nl">.LFB3:</span>
	<span class="nf">.cfi_startproc</span>
	<span class="nf">pushq</span>	<span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa_offset</span> <span class="mi">16</span>
	<span class="nf">.cfi_offset</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span>
	<span class="nf">movq</span>	<span class="o">%</span><span class="nb">rsp</span><span class="p">,</span> <span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa_register</span> <span class="mi">6</span>
	<span class="nf">movl</span>	<span class="o">%</span><span class="nb">edi</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">movl</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">),</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">cmpl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">je</span>	<span class="nv">.L20</span>
	<span class="nf">cmpl</span>	<span class="kc">$</span><span class="mi">2</span><span class="p">,</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">je</span>	<span class="nv">.L21</span>
	<span class="nf">jmp</span>	<span class="nv">.L24</span>
<span class="nl">.L20:</span>
	<span class="nf">addl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L22</span>
<span class="nl">.L21:</span>
	<span class="nf">subl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L22</span>
<span class="nl">.L24:</span>
	<span class="nf">sall</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
<span class="nl">.L22:</span>
	<span class="nf">movl</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">),</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">popq</span>	<span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span>
	<span class="nf">ret</span>
	<span class="nf">.cfi_endproc</span>
</code></pre></div></div>

<p>In this case the switch statement it is compiled as a set of conditional jumps <code class="highlighter-rouge">je</code> (jump if it is equal to ), there is no <em>hash table</em> in this case. As a note, <code class="highlighter-rouge">je</code> checks the status of the <em>zero flag</em> (ZF), if it is <code class="highlighter-rouge">1</code> then it jumps.  For example, in the line <code class="highlighter-rouge">cmpl	$1, %eax</code>, if the value of register <code class="highlighter-rouge">eax</code> is <code class="highlighter-rouge">1</code> then <code class="highlighter-rouge">1 -&gt; ZF</code>, and the programs jumps to <code class="highlighter-rouge">.L20</code>.</p>

<p>Now let’s see the <code class="highlighter-rouge">short_switch</code> but implemented with if-else statements:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">short_ifswitch</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span><span class="p">){</span>	
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">x</span><span class="o">++</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">x</span><span class="o">--</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">x</span><span class="o">*=</span><span class="mi">2</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It’s assembly code:</p>
<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">short_ifswitch:</span>
<span class="nl">.LFB5:</span>
	<span class="nf">.cfi_startproc</span>
	<span class="nf">pushq</span>	<span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa_offset</span> <span class="mi">16</span>
	<span class="nf">.cfi_offset</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span>
	<span class="nf">movq</span>	<span class="o">%</span><span class="nb">rsp</span><span class="p">,</span> <span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa_register</span> <span class="mi">6</span>
	<span class="nf">movl</span>	<span class="o">%</span><span class="nb">edi</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">cmpl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jne</span>	<span class="nv">.L29</span>
	<span class="nf">addl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L30</span>
<span class="nl">.L29:</span>
	<span class="nf">cmpl</span>	<span class="kc">$</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jne</span>	<span class="nv">.L31</span>
	<span class="nf">subl</span>	<span class="kc">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
	<span class="nf">jmp</span>	<span class="nv">.L30</span>
<span class="nl">.L31:</span>
	<span class="nf">sall</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">)</span>
<span class="nl">.L30:</span>
	<span class="nf">movl</span>	<span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="nb">rbp</span><span class="p">),</span> <span class="o">%</span><span class="nb">eax</span>
	<span class="nf">popq</span>	<span class="o">%</span><span class="nb">rbp</span>
	<span class="nf">.cfi_def_cfa</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span>
	<span class="nf">ret</span>
	<span class="nf">.cfi_endproc</span>
</code></pre></div></div>

<p>Of course the compiler will not generated the exact same code for <code class="highlighter-rouge">short_ifswitch</code>, but they are quite similar. Both of them are decoded as a combination of conditional jumps.</p>

<h2 id="conclusion">Conclusion</h2>
<p>If your have several choices <code class="highlighter-rouge">switch</code> statements are the way to go. But for a small set of choices it’s better, most of the time, to use <code class="highlighter-rouge">if-else</code> statements. In either case, for low level optimizations, always, check the assembly code by using either the <code class="highlighter-rouge">gdb</code> or <code class="highlighter-rouge">objdump -D</code>.</p>
:ET